tapable使用：
const {
  SyncHook, // webpack
  SyncBailHook, // webpack
  SyncWaterfallHook,
  SyncLoopHook,
  AsyncParallelHook, // webpack
  AsyncParallelBailHook,
  AsyncSeriesHook, // webpack
  AsyncSeriesBailHook,
  AsyncSeriesWaterfallHook
} = require('tapable');


class MyTapable {
  constructor (context) {
    this.hook = {
      syncHook: new SyncHook(['name']),
      asyncHook: new AsyncParallelHook(['name1', 'name2']),
    }
  }

  registerSyncHook (eventName) {
    this.hook.syncHook.tap(eventName, (name) => {
      console.log(eventName, name);
    })
  }

  registerAsyncHook (eventName, timer) {
    this.hook.asyncHook.tapAsync(eventName, (name) => {
      setTimeout(() => {
        console.log(eventName, name);
      }, timer)
    })
  }

  envokeSync () {
    this.hook.syncHook.call('SYNCHOOK');
  }

  envokeAsync () {
    this.hook.asyncHook.callAsync('ASYNCHOOK', 'param2');
  }
}


let tapableIns = new MyTapable();

tapableIns.registerSyncHook('event1');
tapableIns.registerSyncHook('event2');
tapableIns.registerSyncHook('event3');

tapableIns.registerAsyncHook('event1', 1000);
tapableIns.registerAsyncHook('event2', 2000);
tapableIns.registerAsyncHook('event3', 500);

tapableIns.envokeSync();

tapableIns.envokeAsync();



tapable钩子说明：
BasicHook: 执行每一个，不关心函数的返回值，有 SyncHook、AsyncParallelHook、AsyncSeriesHook。

BailHook: 顺序执行 Hook，遇到第一个结果 result !== undefined 则返回，不再继续执行。有：SyncBailHook、AsyncSeriseBailHook, AsyncParallelBailHook。

WaterfallHook: 类似于 reduce，如果前一个 Hook 函数的结果 result !== undefined，则 result 会作为后一个 Hook 函数的第一个参数。既然是顺序执行，那么就只有 Sync 和 AsyncSeries 类中提供这个Hook：SyncWaterfallHook，AsyncSeriesWaterfallHook

LoopHook: 不停的循环执行 Hook，直到所有函数结果 result === undefined。同样的，由于对串行性有依赖，所以只有 SyncLoopHook 和 AsyncSeriseLoopHook （PS：暂时没看到具体使用 Case）


